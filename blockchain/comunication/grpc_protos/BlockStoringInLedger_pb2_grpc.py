# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comunication.grpc_protos.BlockStoringInLedger_pb2 as BlockStoringInLedger__pb2


class BlockStoringInLedgerStub(object):
    """*
    Block Storing service. It permit to "What block can be stored".

    NOTE: Is different to block mining because block mining told "who has mined",
    Block storing differently told "now you can store in ledger".

    It is useful to avoid problems of contemporaneous block mining of same transactions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendBlockStoringInLedgerNotification = channel.unary_unary(
                '/BlockStoringInLedger/sendBlockStoringInLedgerNotification',
                request_serializer=BlockStoringInLedger__pb2.BlockStoringInLedgerRequest.SerializeToString,
                response_deserializer=BlockStoringInLedger__pb2.BlockStoringInLedgerResponse.FromString,
                )


class BlockStoringInLedgerServicer(object):
    """*
    Block Storing service. It permit to "What block can be stored".

    NOTE: Is different to block mining because block mining told "who has mined",
    Block storing differently told "now you can store in ledger".

    It is useful to avoid problems of contemporaneous block mining of same transactions
    """

    def sendBlockStoringInLedgerNotification(self, request, context):
        """*
        Send block storing notification of Miner Game
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockStoringInLedgerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sendBlockStoringInLedgerNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.sendBlockStoringInLedgerNotification,
                    request_deserializer=BlockStoringInLedger__pb2.BlockStoringInLedgerRequest.FromString,
                    response_serializer=BlockStoringInLedger__pb2.BlockStoringInLedgerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BlockStoringInLedger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlockStoringInLedger(object):
    """*
    Block Storing service. It permit to "What block can be stored".

    NOTE: Is different to block mining because block mining told "who has mined",
    Block storing differently told "now you can store in ledger".

    It is useful to avoid problems of contemporaneous block mining of same transactions
    """

    @staticmethod
    def sendBlockStoringInLedgerNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockStoringInLedger/sendBlockStoringInLedgerNotification',
            BlockStoringInLedger__pb2.BlockStoringInLedgerRequest.SerializeToString,
            BlockStoringInLedger__pb2.BlockStoringInLedgerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
